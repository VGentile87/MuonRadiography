//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file eventgenerator/HepMC/HepMCEx01/src/ExN04DetectorConstruction.cc
/// \brief Implementation of the ExN04DetectorConstruction class
//
// $Id: ExN04DetectorConstruction.cc 77801 2013-11-28 13:33:20Z gcosmo $
//

#include "G4Box.hh"
#include "G4Colour.hh"
#include "G4Element.hh"
#include "G4ElementTable.hh"
#include "G4FieldManager.hh"
#include "G4LogicalVolume.hh"
#include "G4Material.hh"
#include "G4MaterialTable.hh"
#include "G4PVParameterised.hh"
#include "G4PVPlacement.hh"
#include "G4ThreeVector.hh"
#include "G4Tubs.hh"
#include "G4RotationMatrix.hh"
#include "G4Transform3D.hh"
#include "G4TransportationManager.hh"
#include "G4SDManager.hh"
#include "G4SystemOfUnits.hh"
#include "G4VisAttributes.hh"
#include "ExN04CalorimeterParametrisation.hh"
#include "ExN04CalorimeterROGeometry.hh"
#include "ExN04CalorimeterSD.hh"
#include "ExN04DetectorConstruction.hh"
#include "ExN04Field.hh"
#include "ExN04MuonSD.hh"
#include "ExN04TrackerParametrisation.hh"
#include "ExN04TrackerSD.hh"


#include "G4Material.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4Sphere.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4SystemOfUnits.hh"
#include "G4RunManager.hh"
#include "G4PhysicalConstants.hh"
#include "G4SubtractionSolid.hh"
#include "G4UnionSolid.hh"


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
ExN04DetectorConstruction::ExN04DetectorConstruction()
{
  //#include "ExN04DetectorParameterDef.icc"
  DefineMaterials();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
ExN04DetectorConstruction::~ExN04DetectorConstruction()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void ExN04DetectorConstruction::DefineMaterials(){
//
  // Database Material
  //
  
  G4NistManager* nistManager = G4NistManager::Instance();
  nistManager->SetVerbose(1);
  nistManager->FindOrBuildMaterial("G4_POLYETHYLENE"); // plates 
  nistManager->FindOrBuildMaterial("G4_WATER");   // shielding
  nistManager->FindOrBuildMaterial("G4_POLYSTYRENE");  // base emulsion
  nistManager->FindOrBuildMaterial("G4_Pb");  //  lead
  nistManager->FindOrBuildMaterial("G4_Fe");
  nistManager->FindOrBuildMaterial("G4_Cu");  
  nistManager->FindOrBuildMaterial("G4_PLEXIGLASS");
  nistManager->FindOrBuildMaterial("G4_MYLAR");
  nistManager->FindOrBuildMaterial("G4_AIR");

  //
  // Material Properties
  //
  
  G4double a;  // mass of a mole;
  G4double z;  // z=mean number of protons;  
  G4double density;// opera_density, opera_base_density;
  G4double fractionmass;
  G4String name, symbol; 
  G4int ncomponents, natoms;
  G4int base_ncomponents, abs_ncomponents;

  //
  // Emulsion Component  
  //
  
  a = 126.9*g/mole;
  G4Element* elI  = new G4Element(name="Iodium", symbol="I", z=53., a);
  
  a = 107.9*g/mole;
  G4Element* elAg  = new G4Element(name="Silver", symbol="Ag", z=47., a);

  a = 79.9*g/mole;
  G4Element* elBr  = new G4Element(name="Bromine", symbol="Br", z=35., a);
  
  a = 32.1*g/mole;
  G4Element* elS  = new G4Element(name="Sulphur", symbol="S", z=16., a);
  
  a = 16.00*g/mole;
  G4Element* elO  = new G4Element(name="Oxygen", symbol="O", z=8., a);

  a = 14.01*g/mole;
  G4Element* elN  = new G4Element(name="Nitrogen", symbol="N", z= 7., a);
  
  a = 12.00*g/mole;
  G4Element* elC  = new G4Element(name="Carbon", symbol="C", z= 6., a);

  a = 1.01*g/mole;
  G4Element* elH  = new G4Element(name="Hydrogen",symbol="H" , z= 1., a);

  //
  // NIT EMULSION MATERIAL
  //
  
  density = 3.43*g/cm3; // NIT Emulsion
  G4Material* Emulsion = new G4Material(name="Emulsion", density, ncomponents=8);

  //
  // Fraction Mass NIT
  //
  
  Emulsion->AddElement(elAg,fractionmass=0.44065);
  Emulsion->AddElement(elBr,fractionmass=0.32190);
  Emulsion->AddElement(elI, fractionmass=0.01875);
  Emulsion->AddElement(elC, fractionmass=0.1012);
  Emulsion->AddElement(elO, fractionmass=0.0741);
  Emulsion->AddElement(elN, fractionmass=0.0268);
  Emulsion->AddElement(elH, fractionmass=0.0163);
  Emulsion->AddElement(elS, fractionmass=0.0003);

  //--------- OTHER MATERIAL---------------------------------------------//
  //// OTHER MATERIAL
  a = 39.1*g/mole;
  G4Element* elK  = new G4Element(name="Potassium", symbol="K", z=19., a);

  /// POTASSIUM BROMIDE
  G4double density_KBr = 2.75*g/cm3; // NIT Emulsion
  G4Material* KBr = new G4Material(name="KBr", density_KBr, ncomponents=2);
  KBr->AddElement(elK,fractionmass=0.32855);
  KBr->AddElement(elBr,fractionmass=0.67145);

  //ABS C15H17N ( ABS )
  // -------------
  G4double ABSdensity = 1.045*g/cm3;
  G4Material* ABS = new G4Material(name="ABS", ABSdensity, abs_ncomponents=3);
  ABS->AddElement(elC, 15);
  ABS->AddElement(elH, 17);
  ABS->AddElement(elN, 1);
  
  
  //
  // Space Material
  //
  // World Material

  //
  
  new G4Material("Galactic", z=1., a=1.01*g/mole,density= universe_mean_density,
		 kStateGas, 2.73*kelvin, 3.e-18*pascal);
 

  //PMMA C5H8O2 ( Acrylic )
  // -------------
  G4double ACRdensity = 1.19*g/cm3;
  G4Material* Acrylic = new G4Material(name="Acrylic", ACRdensity, base_ncomponents=3);
  Acrylic->AddElement(elC, 5);
  Acrylic->AddElement(elH, 8);
  Acrylic->AddElement(elO, 2);
  

  G4Material* Polystyrene = new G4Material("Polystyrene", density= 1.050*g/cm3, ncomponents=2);
  Polystyrene->AddElement(elC, natoms=8); 
  Polystyrene->AddElement(elH, natoms=8);

  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;

}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
G4VPhysicalVolume* ExN04DetectorConstruction::Construct()
{
///// Physical Parameters /////

  //
  // Get materials
  //    
  G4Material* worldMaterial = G4Material::GetMaterial("G4_AIR");           
  G4Material* emulsionMaterial = G4Material::GetMaterial("Emulsion");
  G4Material* baseMaterial = G4Material::GetMaterial("Acrylic");
  G4Material* boxMaterial = G4Material::GetMaterial("ABS");
  //G4Material* baseMaterial = G4Material::GetMaterial("G4_POLYSTYRENE");
  //G4Material* KBrMaterial = G4Material::GetMaterial("KBr");        
  //G4Material* plateMaterial = G4Material::GetMaterial("G4_WATER");
  //G4Material* plateMaterial = G4Material::GetMaterial("G4_POLYETHYLENE");
  //G4Material* leadMaterial = G4Material::GetMaterial("G4_Pb");
  //G4Material* supportMaterial = G4Material::GetMaterial("G4_Fe");
  //G4Material* coolingMaterial = G4Material::GetMaterial("G4_Cu");
  //G4Material* nitrogen_box_Material = G4Material::GetMaterial("G4_PLEXIGLASS");
  //G4Material* opera_emulsionMaterial = G4Material::GetMaterial("Opera Emulsion");			
  //G4Material* operabaseMaterial = G4Material::GetMaterial("TAC");
  

  if ( ! worldMaterial ) {
    G4ExceptionDescription msg;
    msg << "Cannot retrieve materials already defined."; 
    G4Exception("B4DetectorConstruction::DefineVolumes()",
      "MyCode0001", FatalException, msg);
  }  

 
  /////  Geometrical Parameters /////

  //
  //Dimensioni del mondo
  //
  
  G4double worldSizeX = 20 *m;
  G4double worldSizeY = 20 *m;
  G4double worldSizeZ = 20 *m; 

  //
  // Detector
  //
  
  G4double emuSizeX       = 6.64*cm;  
  G4double emuSizeY       = 6.64*cm; 
  G4double emuSizeZ       = 6.64*cm;

  
  //     
  // World
  //
  
  G4VSolid* worldS 
    = new G4Box("World", worldSizeX/2, worldSizeY/2, worldSizeZ/2);                      
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(worldS, worldMaterial,"World");
                                   
  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(0, G4ThreeVector(),worldLV,                         
                 "World", 0, false, 0, fCheckOverlaps);


  G4VSolid* emulsionS 
    = new G4Box("Emulsion", emuSizeX/2, emuSizeY/2, emuSizeZ/2);                      
  G4LogicalVolume* emulsionLV
    = new G4LogicalVolume(emulsionS, emulsionMaterial,"Emulsion");

  fEmulsionTopPV 
    = new G4PVPlacement(0, G4ThreeVector(0., 0.,0.),             
			emulsionLV, "TopEmulsion", worldLV,
			false, 0, fCheckOverlaps);
  
  
   ///// Draw Experimental Setup /////
  
   //                                        
   // Visualization attributes
   //
   
   worldLV->SetVisAttributes (G4VisAttributes::Invisible);
   
   G4VisAttributes* emulsionVisAtt= new G4VisAttributes();
   emulsionVisAtt->SetVisibility(true);
   emulsionVisAtt->SetColour(G4Colour::Yellow());
   //emulsionVisAtt->SetForceSolid(true);
   emulsionLV->SetVisAttributes(emulsionVisAtt);
  
   return worldPV;

  
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void ExN04DetectorConstruction::PrintDetectorParameters()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
