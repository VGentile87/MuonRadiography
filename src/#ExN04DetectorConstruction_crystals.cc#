#include "ExN04DetectorConstruction.hh"
//#include "ExN04DetectorMessenger.hh"

#include "G4Material.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4Sphere.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4SystemOfUnits.hh"
#include "G4RunManager.hh"
#include "G4PhysicalConstants.hh"
#include "G4SubtractionSolid.hh"
#include "G4UnionSolid.hh"

#include <fstream>
#include <sstream>
#include <stdio.h>
#include <iostream>

using namespace std;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

ExN04DetectorConstruction::ExN04DetectorConstruction()
:G4VUserDetectorConstruction(),
 fDefaultMaterial(0), fCylMaterial(0),
 fSolidWorld(0),fLogicWorld(0),fPhysiWorld(0)
 //fDetectorMessenger(0)
{

  // materials
  DefineMaterials();
  
  // create commands for interactive definition of the calorimeter
  //fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

ExN04DetectorConstruction::~ExN04DetectorConstruction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* ExN04DetectorConstruction::Construct()
{
  return ConstructDetector();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void ExN04DetectorConstruction::DefineMaterials()
{ 

  //
  // Database Material
  //
  
  G4NistManager* nistManager = G4NistManager::Instance();
  nistManager->SetVerbose(1);
  nistManager->FindOrBuildMaterial("G4_POLYETHYLENE"); // plates 
  nistManager->FindOrBuildMaterial("G4_WATER");   // shielding
  nistManager->FindOrBuildMaterial("G4_POLYSTYRENE");  // base emulsion
  nistManager->FindOrBuildMaterial("G4_Pb");  //  lead
  nistManager->FindOrBuildMaterial("G4_Fe");
  nistManager->FindOrBuildMaterial("G4_Cu");  
  nistManager->FindOrBuildMaterial("G4_PLEXIGLASS");  

  //
  // Material Properties
  //
  
  G4double a;  // mass of a mole;
  G4double z;  // z=mean number of protons;  
  G4double density, opera_density, opera_base_density;
  G4double fractionmass;
  G4String name, symbol; 
  G4int ncomponents, natoms;
  G4int base_ncomponents;

  //
  // Emulsion Component  
  //
  
  a = 126.9*g/mole;
  G4Element* elI  = new G4Element(name="Iodium", symbol="I", z=53., a);
  
  a = 107.9*g/mole;
  G4Element* elAg  = new G4Element(name="Silver", symbol="Ag", z=47., a);

  a = 79.9*g/mole;
  G4Element* elBr  = new G4Element(name="Bromine", symbol="Br", z=35., a);
  
  a = 32.1*g/mole;
  G4Element* elS  = new G4Element(name="Sulphur", symbol="S", z=16., a);
  
  a = 16.00*g/mole;
  G4Element* elO  = new G4Element(name="Oxygen", symbol="O", z=8., a);

  a = 14.01*g/mole;
  G4Element* elN  = new G4Element(name="Nitrogen", symbol="N", z= 7., a);
  
  a = 12.00*g/mole;
  G4Element* elC  = new G4Element(name="Carbon", symbol="C", z= 6., a);

  a = 1.01*g/mole;
  G4Element* elH  = new G4Element(name="Hydrogen",symbol="H" , z= 1., a);

  //
  // NIT EMULSION MATERIAL
  //
  
  density = 3.43*g/cm3; // NIT Emulsion
  G4Material* Emulsion = new G4Material(name="Emulsion", density, ncomponents=8);

  //
  // Fraction Mass NIT
  //
  
  Emulsion->AddElement(elAg,fractionmass=0.44065);
  Emulsion->AddElement(elBr,fractionmass=0.32190);
  Emulsion->AddElement(elI, fractionmass=0.01875);
  Emulsion->AddElement(elC, fractionmass=0.1012);
  Emulsion->AddElement(elO, fractionmass=0.0741);
  Emulsion->AddElement(elN, fractionmass=0.0268);
  Emulsion->AddElement(elH, fractionmass=0.0163);
  Emulsion->AddElement(elS, fractionmass=0.0003);

  //// OTHER MATERIAL
  a = 39.1*g/mole;
  G4Element* elK  = new G4Element(name="Potassium", symbol="K", z=19., a);

  /// POTASSIUM BROMIDE
  G4double density_KBr = 2.75*g/cm3; // NIT Emulsion
  G4Material* KBr = new G4Material(name="KBr", density_KBr, ncomponents=2);
  KBr->AddElement(elK,fractionmass=0.32855);
  KBr->AddElement(elBr,fractionmass=0.67145);
  
  //
  // World Material
  //
  
  new G4Material("Galactic", z=1., a=1.01*g/mole,density= universe_mean_density,
		 kStateGas, 2.73*kelvin, 3.e-18*pascal);
 

  //PMMA C5H8O2 ( Acrylic )
  // -------------
  G4double ACRdensity = 1.19*g/cm3;
  G4Material* Acrylic = new G4Material(name="Acrylic", ACRdensity, base_ncomponents=3);
  Acrylic->AddElement(elC, 5);
  Acrylic->AddElement(elH, 8);
  Acrylic->AddElement(elO, 2);
  

  G4Material* Polystyrene = new G4Material("Polystyrene", density= 1.050*g/cm3, ncomponents=2);
  Polystyrene->AddElement(elC, natoms=8); 
  Polystyrene->AddElement(elH, natoms=8);

  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* ExN04DetectorConstruction::ConstructDetector()
{

  ///// Physical Parameters /////

  //
  // Get materials
  //
  G4Material* KBrMaterial = G4Material::GetMaterial("KBr");            
  G4Material* defaultMaterial = G4Material::GetMaterial("Galactic");           
  G4Material* emulsionMaterial = G4Material::GetMaterial("Emulsion");            
  //G4Material* baseMaterial = G4Material::GetMaterial("G4_POLYSTYRENE");
  G4Material* baseMaterial = G4Material::GetMaterial("Acrylic");
  //G4Material* plateMaterial = G4Material::GetMaterial("G4_WATER");
  G4Material* polyMaterial = G4Material::GetMaterial("G4_POLYETHYLENE");
  G4Material* leadMaterial = G4Material::GetMaterial("G4_Pb");
  G4Material* supportMaterial = G4Material::GetMaterial("G4_Fe");
  G4Material* CuMaterial = G4Material::GetMaterial("G4_Cu");
  G4Material* nitrogen_box_Material = G4Material::GetMaterial("G4_PLEXIGLASS");
  G4Material* shieldMaterial = G4Material::GetMaterial("G4_WATER");
  

  if ( ! defaultMaterial ) {
    G4ExceptionDescription msg;
    msg << "Cannot retrieve materials already defined."; 
    G4Exception("B4DetectorConstruction::DefineVolumes()",
      "MyCode0001", FatalException, msg);
  }  

 
  /////  Geometrical Parameters /////

  //
  //Dimensioni del mondo
  //
  
  G4double worldSizeX = 40 *m;
  G4double worldSizeY = 40 *m;
  G4double worldSizeZ = 40 *m; 

  //
  // Detector
  //

  G4double emuSizeX       = 0.67*m;//0.67*m;//30.8*cm;//14.3*cm;
  G4double emuSizeY       = 0.67*m;//0.67*m;//30.8*cm;//14.3*cm;
  G4double emuSizeZ       = 0.67*m;//0.67*m;//30.8*cm;//14.3*cm;

  
  //     
  // World
  //
  
  G4VSolid* worldS 
    = new G4Box("World", worldSizeX/2, worldSizeY/2, worldSizeZ/2);                      
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(worldS, defaultMaterial,"World");
                                   
  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(0, G4ThreeVector(),worldLV,                         
                 "World", 0, false, 0, fCheckOverlaps);




  //
  // Shield dimension
  //

  ///// Poly Cu Pb ////////////////
  G4double innerRadius   = 0*nm;  
  G4double outerRadius   = 0*nm;
  G4int nRegion = 125;//9680;//7;
  G4VPhysicalVolume* fHallPV[nRegion];
  G4double x_pos =0.*nm;
  G4double y_pos =0.*nm;
  G4double z_pos =0.*nm;
  G4int ind_cr=0;
  /////////////////////////////


  //
  // Shield
  //
  std::ifstream in("sphere_coordinates.txt");
  
  G4VSolid* hallS[nRegion];
  G4LogicalVolume* hallLV[nRegion];

  for(G4int i=0; i<nRegion;i++){

    in >> ind_cr >> x_pos >> y_pos >> z_pos >> outerRadius; 

    G4String annulus_index = "Annulus_"+G4UIcommand::ConvertToString(i);

    outerRadius = outerRadius*nm;
    x_pos = x_pos*nm;
    y_pos = y_pos*nm;
    z_pos = z_pos*nm;
    
    hallS[i] = new G4Sphere(annulus_index,   // Name
				      innerRadius,    // Inner radius
				      outerRadius,    // Outer radius
				      0.*deg,         // Starting phi
				      360.*deg,       // Delta phi
				      0.*deg,         // Starting theta
				      180.*deg);      // Delta theta

    hallLV[i]
      = new G4LogicalVolume(hallS[i], defaultMaterial, annulus_index);

    fHallPV[i]
	= new G4PVPlacement(0, G4ThreeVector(x_pos, y_pos, z_pos),
			    hallLV[i],annulus_index, worldLV,  
			    false, 0, fCheckOverlaps); 
    

    cout << endl;
    cout << i << " " << x_pos/nm << " " << y_pos/nm << " " << z_pos/nm << " " << innerRadius/nm << " " << outerRadius/nm << " " << hallLV[i]->GetMaterial() << endl;
    if(fCheckOverlaps==true) cout << i << "OVERLAPS" << endl;
  }

  

  

   ///// Draw Experimental Setup /////
  
   //                                        
   // Visualization attributes
   //
   
   worldLV->SetVisAttributes (G4VisAttributes::Invisible);
   /* 
   G4VisAttributes* emulsionVisAtt= new G4VisAttributes();
   emulsionVisAtt->SetVisibility(true);
   emulsionVisAtt->SetColour(G4Colour::Yellow());
   emulsionVisAtt->SetForceSolid(true);
   emulsionLV->SetVisAttributes(emulsionVisAtt);
*/
   G4VisAttributes* FirstVisAtt= new G4VisAttributes();
   FirstVisAtt->SetVisibility(true);
   FirstVisAtt->SetColour(G4Colour::Red());
   FirstVisAtt->SetForceAuxEdgeVisible(true);

   G4VisAttributes* SecondVisAtt= new G4VisAttributes();
   SecondVisAtt->SetVisibility(true);
   SecondVisAtt->SetColour(G4Colour::Green());
   SecondVisAtt->SetForceAuxEdgeVisible(true);

   G4VisAttributes* ThirdVisAtt= new G4VisAttributes();
   ThirdVisAtt->SetVisibility(true);
   ThirdVisAtt->SetColour(G4Colour::Blue());
   ThirdVisAtt->SetForceAuxEdgeVisible(true);

   int col_index =0;
   
   for(G4int i=0; i<nRegion;i++){
     if(i%3==0)col_index=0;
     if(col_index==0)hallLV[i]->SetVisAttributes(FirstVisAtt);
     if(col_index==1)hallLV[i]->SetVisAttributes(SecondVisAtt);
     if(col_index==2)hallLV[i]->SetVisAttributes(ThirdVisAtt);
     col_index++;
   }

   
   return worldPV;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void ExN04DetectorConstruction::PrintDetectorParameters()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
